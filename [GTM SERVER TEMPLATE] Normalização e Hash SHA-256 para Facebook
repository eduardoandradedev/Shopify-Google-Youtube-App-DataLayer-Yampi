const makeString = require('makeString');
const createRegex = require('createRegex');
const sha256Sync = require('sha256Sync');
const logToConsole = require('logToConsole');

// Entrada
let inputText = makeString(data.inputVariable || '');
let fieldType = data.fieldType || 'generic'; // ex: 'em', 'ph', 'fn', 'ln', etc.

logToConsole('Valor original:', inputText);

// Etapas base
inputText = inputText.trim().toLowerCase();

if (fieldType === 'em') {
  // Manter apenas letras, números, @ _ . - +
  const emailSafeRegex = createRegex('[^a-z0-9@_.\\-+]', 'g'); // "-" escapado
  inputText = inputText.replace(emailSafeRegex, '');
} else {
  // Remover acentos
  const accentMap = {
    'á': 'a', 'à': 'a', 'â': 'a', 'ã': 'a', 'ä': 'a',
    'é': 'e', 'è': 'e', 'ê': 'e', 'ë': 'e',
    'í': 'i', 'ì': 'i', 'î': 'i', 'ï': 'i',
    'ó': 'o', 'ò': 'o', 'ô': 'o', 'õ': 'o', 'ö': 'o',
    'ú': 'u', 'ù': 'u', 'û': 'u', 'ü': 'u',
    'ç': 'c', 'ñ': 'n'
  };
  for (let char in accentMap) {
    const regex = createRegex(char, 'g');
    inputText = inputText.replace(regex, accentMap[char]);
  }

  // Remover espaços
  const spaceRegex = createRegex('\\s+', 'g');
  inputText = inputText.replace(spaceRegex, '');

  // Manter apenas letras e números
  const cleanRegex = createRegex('[^a-z0-9]', 'g');
  inputText = inputText.replace(cleanRegex, '');
}

logToConsole('Valor normalizado:', inputText);

// Hash SHA-256
if (inputText && inputText.length > 0) {
  inputText = sha256Sync(inputText, { outputEncoding: 'hex' });
  logToConsole('Valor com hash:', inputText);
}

return inputText;
